<div>
    <div id="navbar">
        <button type="button" id="save">Save</button>
        <span>Backend:</span>
        <select id="backend">
            <option value="SQLiteFiddle" selected>SQLite</option>
            <option value="TSQLFiddle">T-SQL</option>
            <option value="PostgresFiddle">Postgres</option>
        </select>
        <span style="float: right">
            <a href="#52632EC5A298CFFFD652D53C03DD1318A9DACA3C" style="margin-right: 50px">(example)</a>
            SQL typechecking and translation
            <a href="https://github.com/rspeele/Rezoom.SQL">powered by RZSQL</a>.
            Web interface built with the
            <a href="https://ace.c9.io/">Ace code editor</a>.
        </span>
    </div>
    <div id="footer">
        &copy; 2017 by <a href="https://github.com/rspeele">Robert Peele</a>
    </div>
    <div id="model-editor"></div>
    <div id="model-output"></div>
    <div id="command-editor"></div>
    <div id="command-output"></div>
    <div id="typechecker-output"></div>
</div>
@section scripts {
    @Scripts.Render("~/bundles/ace")
    <script type="text/javascript">
        $(document).ready(function () {
            var modelEditor = ace.edit('model-editor');
            var modelSession = modelEditor.getSession();
            modelEditor.setTheme('ace/theme/sqlserver');
            modelSession.setMode('ace/mode/sql');

            var commandEditor = ace.edit('command-editor');
            var commandSession = commandEditor.getSession();
            commandEditor.setTheme('ace/theme/sqlserver');
            commandSession.setMode('ace/mode/sql');

            var modelOutput = ace.edit('model-output');
            modelOutput.getSession().setMode('ace/mode/sql');
            modelOutput.setTheme('ace/theme/katzenmilch');
            modelOutput.setReadOnly(true);

            var commandOutput = ace.edit('command-output');
            commandOutput.getSession().setMode('ace/mode/sql');
            commandOutput.setTheme('ace/theme/katzenmilch');
            commandOutput.setReadOnly(true);

            var $backend = $('#backend');
            var $output = $('#typechecker-output');
            var $save = $('#save');

            var AceRange = ace.require('ace/range').Range;

            var formatTypeName = function (ty) {
                return ty.name.toLowerCase().replace(/[<>]/g, '') + (ty.nullable ? ' (nullable)' : '');
            };

            var showTypeInfo = function (info) {
                var $div = $('<div/>');

                if (info.parameters.length > 0) {
                    $div.append('<h4>Parameters</h4>');
                    (function () {
                        var parameters = info.parameters;
                        var $table = $('<table class="parameters"></table>');
                        var $header = $('<tr></tr>');
                        for (var i = 0; i < parameters.length; i++) {
                            var $th = $('<th></th>').text('@@' + parameters[i].name);
                            $header.append($th);
                        }
                        $table.append($header);
                        var $row = $('<tr></tr>');
                        for (var i = 0; i < parameters.length; i++) {
                            var pty = parameters[i].type;
                            var $th = $('<td></td>').text(formatTypeName(pty));
                            $row.append($th);
                        }
                        $table.append($row);
                        $div.append($table);
                    })();
                }

                if (info.resultSets.length > 0) {
                    $div.append('<h4>Result Sets</h4>');

                    var resultSets = info.resultSets;
                    for (var i = 0; i < resultSets.length; i++) {
                        var resultSet = resultSets[i].columns;
                        (function () {
                            var $table = $('<table class="result-set"></table>');
                            var $header = $('<tr></tr>');
                            for (var i = 0; i < resultSet.length; i++) {
                                var $th = $('<th></th>').text(resultSet[i].name);
                                $header.append($th);
                            }
                            $table.append($header);
                            var $row = $('<tr></tr>');
                            for (var i = 0; i < resultSet.length; i++) {
                                var pty = resultSet[i].type;
                                var $th = $('<td></td>').text(formatTypeName(pty));
                                $row.append($th);
                            }
                            $table.append($row);
                            $div.append($table);
                        })();
                    }
                }

                $div.append('<h4>Cacheable: ' + (info.idempotent ? 'yes' : 'no') + '</h4>');
                (function () {
                    var reads = info.readTables;
                    var writes = info.writeTables;
                    if (reads.length > 0) {
                        $div.append('<span class="cacheinfo">Depends on: ' + reads.join(', ') + '.</span>');
                    }
                    if (writes.length > 0) {
                        $div.append('<span class="cacheinfo invalidation">Invalidates: ' + writes.join(', ') + '.</span>');
                    }
                })();

                $output.html($div);
            };

            var currentValid = false;
            var removeMarker = function () { };
            var onTypeChecked = function (data) {
                var cases = {
                    FiddleInvalid: function () {
                        currentValid = false;
                        var err = data.fields[0];
                        var session = ({ ModelError: modelSession, CommandError: commandSession })[err.type.case];
                        var row = Math.max(0, err.startLine - 1);
                        var col = Math.max(0, err.startColumn - 1);
                        session.setAnnotations([{ row: row, column: col, text: err.reason }]);
                        removeMarker();
                        
                        var range = new AceRange(row, col, Math.max(0, err.endLine - 1), Math.max(0, err.endColumn - 1));
                        var markerId = session.addMarker(range, 'error-marker');
                        removeMarker = function () {
                            session.removeMarker(markerId);
                        };

                        $output.toggleClass('valid', false);

                        $output.text(err.message);
                        modelOutput.setValue('');
                        commandOutput.setValue('');
                    },
                    FiddleValid: function () {
                        currentValid = true;
                        removeMarker();
                        modelSession.setAnnotations([]);
                        commandSession.setAnnotations([]);

                        $output.toggleClass('valid', true);

                        var ty = data.fields[0];
                        $output.html(showTypeInfo(ty));
                        modelOutput.setValue(ty.backendModel, -1);
                        commandOutput.setValue(ty.backendCommand, -1);
                    }
                };
                cases[data.case]();
            };

            var fiddleInput = function () {
                return {
                    backend: { case: $backend.val() },
                    model: modelEditor.getValue(),
                    command: commandEditor.getValue(),
                    valid: false,
                };
            };

            var lastCheck = new Date().getTime();
            var check = function () {
                lastCheck = new Date().getTime();
                $.ajax({
                    type: 'POST',
                    url: '/api/check',
                    data: JSON.stringify(fiddleInput()),
                    dataType: 'json',
                    contentType: 'application/json;charset=utf-8',
                    success: function (data) {
                        onTypeChecked(data);
                    },
                    error: function (err) {
                        console.log(JSON.stringify(err));
                    },
                });
            };

            var currentHash = undefined;
            var setHash = function (fiddleId) {
                if (fiddleId) {
                    fiddleId = '#' + fiddleId;
                    $save.text(fiddleId);
                    $save.attr('disabled', true);
                } else {
                    $save.text('Save');
                    $save.attr('disabled', false);
                }
                currentHash = fiddleId;
                window.location.hash = currentHash;
            }

            var checkTimeout = undefined;
            var checkDisabled = false;
            var debounceCheck = function () {
                if (checkDisabled) return;
                var model = modelEditor.getValue();
                var command = commandEditor.getValue();
                setHash('');
                localStorage.setItem('rzsql-backend', $backend.val());
                localStorage.setItem('rzsql-model', model);
                localStorage.setItem('rzsql-command', command);
                if (lastCheck + 3000 < new Date().getTime()) {
                    check();
                } else {
                    if (checkTimeout !== undefined) {
                        clearTimeout(checkTimeout);
                        checkTimeout = undefined;
                    }
                    checkTimeout = setTimeout(check, currentValid ? 800 : 400);
                }
            };

            $backend.val(localStorage.getItem('rzsql-backend'));
            modelEditor.setValue(localStorage.getItem('rzsql-model') || '', 1);
            commandEditor.setValue(localStorage.getItem('rzsql-command') || '', 1);
            modelSession.on('change', debounceCheck);
            commandSession.on('change', debounceCheck);
            $backend.change(debounceCheck);

            var loadHash = function () {
                if (!window.location.hash || window.location.hash === currentHash) return;
                currentHash = window.location.hash;
                var fiddleId = window.location.hash.substring(1);
                $.ajax({
                    type: 'GET',
                    url: '/api/get/' + fiddleId,
                    dataType: 'json',
                    success: function (data) {
                        checkDisabled = true;
                        $backend.val(data.input.backend.case);
                        modelEditor.setValue(data.input.model, -1);
                        commandEditor.setValue(data.input.command, -1);
                        checkDisabled = false;
                        setHash(fiddleId);
                        onTypeChecked(data.output);
                    },
                    error: function (err) {
                        alert('No such fiddle');
                        window.location.hash = '';
                    },
                });
            };
            if (window.location.hash) {
                loadHash();
            } else {
                check();
            }
            setInterval(loadHash, 100);

            var saveFiddle = function () {
                $.ajax({
                    type: 'POST',
                    url: '/api/save',
                    data: JSON.stringify(fiddleInput()),
                    dataType: 'json',
                    contentType: 'application/json;charset=utf-8',
                    success: function (data) {
                        setHash(data.id);
                    },
                    error: function (err) {
                        alert(JSON.stringify(err));
                    },
                });
            };

            $save.click(saveFiddle);
        });
    </script>
}